---
const { label, index = null } = Astro.props;

// generate stable-ish id per instance (use index if provided)
const uid = index ? `accordion-${index}` : `accordion-${Math.random().toString(36).slice(2, 9)}`;
---
<div class="accordion-section" data-accordion-id={uid}>
  <div
    class="accordion-header h-[170px] shadow-card rounded-3xl flex justify-between px-4 py-3 items-center transition-colors ease duration-500 cursor-pointer pr-10 relative"
    role="button"
    tabindex="0"
    aria-controls={`${uid}-content`}
    aria-expanded="false"
  >
    <div class="flex items-center px-10 pt-10 w-full transition ease duration-500">
      <div class="flex pb-10 gap-5 w-full items-center">
        <div class="flex justify-between w-full items-center rounded-full">
          <div class="flex items-center gap-5">
            {index && (
              <>
                <p class="text-5xl font-medium flex items-center text-[var(--text-color)]">{index}</p>
                <p class="text-xl px-4 overflow-hidden text-ellipsis line-clamp-2 transition-all duration-500 text-[var(--text-color)]">
                  {label}
                </p>
              </>
            )}
          </div>

          <div
            class="rounded-full relative accodion-chevron flex items-center justify-center h-10 w-10 px-4"
            aria-hidden="true"
          >
            <!-- visual chevron (plus -> rotates on open) -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <div
    id={`${uid}-content`}
    class="accordion-content max-h-0 rounded-b-3xl px-4 overflow-hidden transition-all ease duration-500"
    aria-hidden="true"
  >
    <p class="text-justify text-[var(--text-color)] p-10">
      <slot />
    </p>
  </div>
</div>

<style>
  /* Use CSS variables so theme toggle affects these */
  .accordion-section .accordion-header {
    background: var(--card-bg, #f4f4f5); /* fallback */
    border: 1px solid var(--card-border, #e5e7eb);
    color: var(--text-color, #111827);
  }

  .accordion-content {
    background: var(--card-bg, #f4f4f5);
  }

  /* Chevron (plus) using pseudo elements */
  .accodion-chevron::after,
  .accodion-chevron::before {
    content: "";
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    background: currentColor;
    transition: transform 0.35s ease;
    border-radius: 2px;
  }

  .accodion-chevron::after {
    width: 8px;
    height: 53%;
  }
  .accodion-chevron::before {
    width: 53%;
    height: 8px;
  }

  /* clamp 2 lines initially */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
    overflow: hidden;
  }

  /* OPEN state styles (uses a data attribute for clarity) */
  .accordion-section.open .accordion-content {
    max-height: 1000px; /* large enough to reveal content */
  }

  .accordion-section.open .line-clamp-2 {
    -webkit-line-clamp: unset;
  }

  /* rotate chevron to become an "x" or arrow */
  .accordion-section.open .accodion-chevron::after {
    transform: translate(-50%, -50%) rotate(90deg);
  }
  .accordion-section.open .accodion-chevron::before {
    transform: translate(-50%, -50%) rotate(90deg);
    opacity: 0; /* hide one bar if you prefer a single rotated bar */
  }

  /* change header background/foreground on open - use variables so theme applies */
  .accordion-section.open .accordion-header {
    background: var(--accent-color, #84cc16); /* fallback lime */
    color: var(--card-bg, #ffffff);
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }

  /* smooth text color transitions */
  .accordion-header,
  .accordion-content,
  .accodion-chevron {
    transition: background-color 0.25s ease, color 0.25s ease;
  }

  /* keyboard focus outline */
  .accordion-header:focus {
    outline: 3px solid color-mix(in srgb, var(--accent-color, #84cc16) 20%, transparent);
    outline-offset: 4px;
  }
</style>

<script is:inline>
  (function () {
    // Toggle function for a section element
    function toggleSection(section, { closeOthers = true } = {}) {
      if (!section) return;
      const isOpen = section.classList.contains('open');

      if (closeOthers) {
        // close other sections
        document.querySelectorAll('.accordion-section.open').forEach((s) => {
          if (s !== section) {
            s.classList.remove('open');
            const hdr = s.querySelector('.accordion-header');
            const content = s.querySelector('.accordion-content');
            if (hdr) hdr.setAttribute('aria-expanded', 'false');
            if (content) content.setAttribute('aria-hidden', 'true');
          }
        });
      }

      const header = section.querySelector('.accordion-header');
      const content = section.querySelector('.accordion-content');

      if (isOpen) {
        section.classList.remove('open');
        if (header) header.setAttribute('aria-expanded', 'false');
        if (content) content.setAttribute('aria-hidden', 'true');
      } else {
        section.classList.add('open');
        if (header) header.setAttribute('aria-expanded', 'true');
        if (content) content.setAttribute('aria-hidden', 'false');
      }
    }

    // Delegated click handler so it works across client-side navigations
    document.addEventListener('click', function (e) {
      const header = e.target && e.target.closest && e.target.closest('.accordion-header');
      if (!header) return;
      e.preventDefault();
      const section = header.closest('.accordion-section');
      toggleSection(section, { closeOthers: true });
    });

    // Keyboard support: Enter / Space toggles focused header
    document.addEventListener('keydown', function (e) {
      const active = document.activeElement;
      if (!active) return;
      if (!active.classList || !active.classList.contains('accordion-header')) return;

      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        const section = active.closest('.accordion-section');
        toggleSection(section, { closeOthers: true });
      } else if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
        // optional: move focus between headers
        const headers = Array.from(document.querySelectorAll('.accordion-header'));
        const idx = headers.indexOf(active);
        if (idx >= 0) {
          const nextIdx = e.key === 'ArrowDown' ? Math.min(headers.length - 1, idx + 1) : Math.max(0, idx - 1);
          headers[nextIdx].focus();
          e.preventDefault();
        }
      }
    });

    // Keep aria states synced after Astro client-side navigation
    function syncAllAccordions() {
      document.querySelectorAll('.accordion-section').forEach((section) => {
        const header = section.querySelector('.accordion-header');
        const content = section.querySelector('.accordion-content');
        const isOpen = section.classList.contains('open');
        if (header) header.setAttribute('aria-expanded', String(isOpen));
        if (content) content.setAttribute('aria-hidden', String(!isOpen));
      });
    }

    document.addEventListener('DOMContentLoaded', syncAllAccordions);
    document.addEventListener('astro:page-load', function () {
      // allow DOM replacement to settle
      setTimeout(syncAllAccordions, 0);
    });

    // Expose for debugging (optional)
    window.__boscAccordion = {
      toggleById: function (id) {
        const section = document.querySelector(`.accordion-section[data-accordion-id="${id}"]`);
        if (section) toggleSection(section, { closeOthers: true });
      }
    };
  })();
</script>

---
import Container from "./Container.astro";
import ArticleIcon from "./Icons/ArticleIcon.astro";
import Topic from "./Topic.astro";

const isProd = import.meta.env.PROD;
const isDev = import.meta.env.DEV;

let user_url = "http://localhost:8787/user";
if (isProd) {
  user_url = "https://api.bosc.org.np/user";
} else if (isDev) {
  user_url = "http://localhost:8787/user";
} else {
  user_url = "https://api.bosc.org.np/user";
}
---
<Container>
  <div class="relative flex flex-col items-center md:flex-row" id="contact">
    <Topic
      title="Contact"
      description="Feature your Blog -- Partner with us -- Or just say Hi -- You can also mail us at mail@bosc.org.np directly."
    />
  </div>

  <div class="relative flex flex-col items-center md:flex-row my-6 bg-[var(--card-bg)] border border-[var(--card-border)] rounded-[45px]">
    <div class="row items-center py-12 px-4 md:px-20 md:w-8/12 md:py-10">
      <form class="space-y-4 md:w-full" id="cn-form" novalidate>
        <div>
          <span
            class="inline-flex items-center px-2.5 py-0.5 rounded text-xs font-medium"
            style="background:var(--accent-color); color:var(--primary-btn-text)"
          >
            <ArticleIcon />
            <strong class="ml-2">NEWSLETTER - Launched ðŸ’¬</strong>
          </span>
          <br />
          <strong class="text-[var(--text-color)]">Subscribe</strong>
          <span class="text-[var(--text-muted)]"> to get updates of our <strong>future events</strong> and workshops.</span>
        </div>

        <div>
          <label for="name" class="block mb-2 text-base font-medium text-[var(--text-color)]">Name</label>
          <input
            type="text"
            id="cn-name"
            name="name"
            class="shadow-sm bg-[var(--card-bg)] border border-[var(--card-border)] text-[var(--text-color)] text-base rounded-lg focus:ring-0 block w-full p-2.5"
            placeholder="John Doe"
            required
          />
        </div>

        <div>
          <label for="email" class="block mb-2 text-base font-medium text-[var(--text-color)]">Email</label>
          <div class="relative flex flex-col items-center justify-between md:flex-row bg-[var(--card-bg)] rounded-[45px]">
            <input
              type="email"
              id="cn-email"
              name="email"
              class="block p-3 w-full text-base text-[var(--text-color)] bg-[var(--card-bg)] rounded-lg border border-[var(--card-border)] shadow-sm"
              placeholder="john.doe@gmail.com"
              required
            />
            <button
              id="cn-subs-btn"
              type="submit"
              form="cn-form"
              class="px-4 py-3 m-2 text-[var(--primary-btn-text)] bg-[var(--primary-btn-bg)] rounded-[14px] inline-flex justify-center items-center hover:opacity-95 border border-[var(--card-border)]"
            >
              <span class="text-center text-xl font-normal leading-7">Subscribe</span>
            </button>
          </div>
        </div>

        <div class="sm:col-span-2">
          <label for="message" class="block mb-2 text-base font-medium text-[var(--text-color)]">Message</label>
          <textarea
            id="cn-msg"
            name="message"
            rows="6"
            class="block p-2.5 w-full text-base text-[var(--text-color)] bg-[var(--card-bg)] rounded-lg shadow-sm border border-[var(--card-border)]"
            placeholder="I really like what BOSC is doing! Keep it up."
          ></textarea>
        </div>

        <button
          id="cn-msg-btn"
          type="submit"
          form="cn-form"
          class="w-full text-[var(--primary-btn-text)] py-5 bg-[var(--primary-btn-bg)] rounded-[14px] inline-flex justify-center items-center hover:opacity-95 border border-[var(--card-border)]"
        >
          <div class="text-center text-xl font-normal leading-7">Send Message</div>
        </button>

        <!-- hidden form fields for compatibility with whichever backend you use -->
        <input id="cn-next" type="hidden" name="_next" value="https://bosc.org.np" />
        <input id="cn-template" type="hidden" name="_template" value="box" />
        <input id="cn-captcha" type="hidden" name="_captcha" value="true" />
      </form>

      <!-- span used to make user_url available to client script without bundling server code -->
      <span id="hey111" data-msg={user_url}></span>

      <script is:inline>
        (function () {
          // Lightweight notify fallbacks: if your project exposes window.NotifySuccess / NotifyError / NotifyMessage
          // they will be used; otherwise fall back to simple implementations.
          function NotifySuccess(msg) {
            if (window.NotifySuccess) return window.NotifySuccess(msg);
            try { /* small non-blocking toast replacement */ console.info("SUCCESS:", msg); } catch (e) {}
            // fallback UI
            // You may want to replace this with a nicer in-page toast
            alert(msg);
          }
          function NotifyError(msg) {
            if (window.NotifyError) return window.NotifyError(msg);
            try { console.warn("ERROR:", msg); } catch (e) {}
            alert(msg);
          }
          function NotifyMessage(message, timeout = 3000) {
            // If project exposes a constructor for persistent messages, use it.
            if (window.NotifyMessage) {
              try { return new window.NotifyMessage(message, timeout); } catch (e) {}
            }
            // fallback "message" object with show/hide
            let shown = false;
            return {
              show: function () {
                if (shown) return;
                shown = true;
                // you can replace with a custom DOM toast
                console.info("MSG:", message);
              },
              hide: function () {
                shown = false;
              },
            };
          }

          // helper: read user_url from DOM dataset defensively
          function getUserUrl() {
            try {
              const el = document.getElementById("hey111");
              return el ? el.dataset.msg : null;
            } catch (e) {
              return null;
            }
          }

          // handle subscription POST (only name + email)
          async function handleSubscribe(formData, subscriptionOnly) {
            // copy to avoid mutating original
            const fd = new FormData();
            fd.append("username", formData.get("name") || "");
            fd.append("email", formData.get("email") || "");

            const object = Object.fromEntries(fd);
            const json = JSON.stringify(object);

            let toast;
            if (subscriptionOnly) {
              toast = NotifyMessage("Subscribing...", -1);
              toast.show && toast.show();
            }

            const userUrl = getUserUrl() || "/user";
            try {
              const resp = await fetch(userUrl, {
                method: "POST",
                body: json,
                headers: {
                  "Content-Type": "application/json",
                },
              });

              console.log("Subscription status:", resp.status, resp.statusText);
              if (subscriptionOnly) {
                if (resp.status === 200) {
                  toast && toast.hide && toast.hide();
                  NotifySuccess("Successfully subscribed! ðŸŽ‰");
                } else {
                  toast && toast.hide && toast.hide();
                  NotifyError("Subscription returned non-200 response.");
                }
              }
            } catch (error) {
              console.error("Error during subscription:", error);
              toast && toast.hide && toast.hide();
              if (error.name === "TypeError") {
                // often CORS/fetch issues
                NotifySuccess("Partially Subscribed. We will get back to you soon.");
              } else {
                NotifyError("Unable to subscribe. Still Under Development.");
              }
            }
          }

          // handle sending full message via third-party endpoint
          async function handleMessage(jsonString) {
            const msg = NotifyMessage("Sending... Feel free to browse the website.", -1);
            msg.show && msg.show();

            try {
              const resp = await fetch("https://formsubmit.co/ajax/8c368e944b0e888ffcb863838e3fbc00", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: jsonString,
              });

              if (!resp.ok) {
                console.warn("Failed to send message. response:", resp);
                msg.hide && msg.hide();
                NotifyError("Failed to send message. Still Under Development.");
                return;
              }

              const data = await resp.json();
              console.log("Message Success Response:", data);
              if (data && data.success) {
                msg.hide && msg.hide();
                NotifySuccess("Message sent successfully!");
              } else {
                msg.hide && msg.hide();
                NotifySuccess("Message partially sent. We will get back to you soon.");
              }
            } catch (error) {
              msg.hide && msg.hide();
              console.error("Message send error:", error);
              if (error.name === "TypeError") {
                NotifySuccess("Message partially sent. We will get back to you soon.");
              } else {
                NotifyError("Failed to send message. Still Under Development.");
              }
            }
          }

          // Delegated submit handler â€” works even after Astro client-side navigation
          document.addEventListener("submit", function (e) {
            const form = e.target;
            if (!form || form.id !== "cn-form") return;

            e.preventDefault();

            const formData = new FormData(form);
            const obj = Object.fromEntries(formData);
            const jsonString = JSON.stringify(obj);

            // basic validation
            const email = obj.email ? String(obj.email).trim() : "";
            const name = obj.name ? String(obj.name).trim() : "";
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            const subscriptionOnly = !obj.message || String(obj.message).trim() === "";

            if (!name || !email || !emailRegex.test(email)) {
              NotifyError("Come on â€” fill the form correctly.");
              return;
            }

            // run subscribe
            handleSubscribe(formData, subscriptionOnly);

            // if message present, also send message to formsubmit
            if (!subscriptionOnly) {
              handleMessage(jsonString);
            }

            // reset form safely
            try {
              form.reset();
            } catch (err) {}

            // remove query params if any (keeps url clean)
            try {
              const currentUrl = window.location.href;
              const baseUrl = currentUrl.split("?")[0];
              window.history.replaceState({}, "", baseUrl);
            } catch (err) {}
          });

          // sync visual state of form (if you want to adapt to theme, this is a hook)
          function syncFormTheme() {
            // e.g. set placeholders colors or other small JS-driven style tweaks if required
            // currently using CSS variables, so nothing required here â€” this hook is provided if needed
          }

          document.addEventListener("DOMContentLoaded", syncFormTheme);
          document.addEventListener("astro:page-load", function () {
            setTimeout(syncFormTheme, 0);
          });
        })();
      </script>
    </div>

    <div class="hidden md:grid md:justify-items-end md:w-4/12 md:py-2">
      <img src="./clients/contact.svg" alt="contact illustration" width="80%" />
    </div>
  </div>
</Container>

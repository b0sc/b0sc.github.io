---
import Layout from "../../../layouts/Layout.astro";
import Container from "../../../components/Container.astro";
import { getCollection } from "astro:content";
import { formatDate } from "../../../utils/utils";
import "../../../styles/bloglayout.css";
import "../../../styles/global.css";
import type { CollectionEntry } from "astro:content";

export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  return blogEntries.map((entry: any) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props as { entry: CollectionEntry<"blog"> };
const { Content } = await entry.render();
---

<Layout
  title={entry.data.title}
  description={entry.data.summary}
  image={entry.data.coverImage}
  url={"https://bosc.org.np/explore/article/" + entry.slug}
>
  <main class="pt-7 pb-16">
    <Container>
      <section class="bg-[var(--bg-color)]">
        <div
          class="gap-16 items-center py-8 px-4 mx-auto max-w-screen-xl lg:grid lg:grid-cols-1 lg:py-16 lg:px-6"
        >
          <div class="font-light text-[var(--text-muted)] sm:text-lg">
            <a
              href="/explore/articles"
              class="inline-flex items-center font-medium text-[var(--text-color)] hover:text-lime-500 my-4"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                class="h-6 w-6"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M7 16l-4-4m0 0l4-4m-4 4h18"
                >
                </path>
              </svg>
              <span class="ml-1 font-bold text-lg">All Articles</span>
            </a>
            <div
              class="md:pr-0 md:pl-0 sm:pl-0 sm:pr-0 xs:pl-0 xs:pr-0 lg:pl-60 lg:pr-60"
            >
              <div class="text-center">
                <h2
                  class="mb-4 text-4xl tracking-tight font-extrabold text-[var(--text-color)]"
                >
                  {entry.data.title}
                </h2>
                <h3 class="text-lg mb-2 text-[var(--text-muted)]">
                  Written by {entry.data.author} on {
                    formatDate(entry.data.pubDate)
                  }
                </h3>
                <br />
              </div>
              <div class="content gap-[20px]" id="blogclass">
                <Content />
              </div>
            </div>
          </div>
        </div>
      </section>
    </Container>
  </main>
  <script>
    let copyButtonLabel = "Copy Code";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className = "copy-code";
      copyButton.innerHTML = copyButtonLabel;

      const parentNode = codeBlock.parentNode;
      if (parentNode) {
        codeBlock.setAttribute("tabindex", "0");
        codeBlock.appendChild(copyButton);
        parentNode.insertBefore(wrapper, codeBlock);
        wrapper.appendChild(codeBlock);

        copyButton.addEventListener("click", async () => {
          await copyCode(codeBlock, copyButton);
        });
      }
    }

    async function copyCode(block: HTMLElement, button: HTMLButtonElement) {
      let code = block.querySelector("code");
      if (code) {
        let text = code.innerText;
        await navigator.clipboard.writeText(text);

        button.innerText = "Code Copied";

        setTimeout(() => {
          button.innerText = copyButtonLabel;
        }, 700);
      }
    }
  </script>
</Layout>